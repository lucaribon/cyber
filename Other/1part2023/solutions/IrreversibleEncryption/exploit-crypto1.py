#!/usr/bin/env python3

'''
If you are not in linux (ubuntu in my case)
remove the first line (called shebang) and run the code with
python3 exploit-crypto1.py
with the encrypted_flag.txt file in the same directory

if you are in ubuntu, the script probably works with
chmod 755 exploit-crypto1.py
./exploit-crypto1.py
'''

import base64
import string
import binascii

ALPHABET = list(string.printable)   # len = 100
LEN = len(ALPHABET)

# FLAG = "spritz{But_wa1t_R3vers1ble_OP3rations_are_B4D}"

# decoding instead of encoding
# but the method is exactely the same
def base64decode(message):
    message_bytes = message.encode('ascii')
    b64_bytes = base64.b64decode(message_bytes) # here changes to decode
    b64_message = b64_bytes.decode('ascii')
    return b64_message

def base32decode(message):
    message_bytes = message.encode('ascii')
    b32_bytes = base64.b32decode(message_bytes) # here changes to decode
    b32_message = b32_bytes.decode('ascii')
    return b32_message

# this method is the same
def XORencode(message, KEY="c4mPar1"):
    rep = len(message)//len(KEY) + 1
    key = (KEY*rep)[:len(message)]
    xored = ''.join([chr(ord(a) ^ ord(b)) for a,b in zip(message, key)])
    return xored

# this method is the same
def ROTencode(message, pos):
    rot13_enc = ''
    for c in message:
        i = ALPHABET.index(c)
        rot13_enc += ALPHABET[(i+pos)%LEN]
    return rot13_enc

# this method is the same
def ascii_to_hex(message):
    # message_bytes = message.encode('ascii')
    encoded = binascii.hexlify(message)
    return encoded


'''
    Inverse operation
'''

# open the file and read the flag
with open("encrypted_flag.txt", "r") as f:
    hex_encrypted= f.read()
    f.close()

# decode the flag from hex to ascii
decoded = binascii.unhexlify(hex_encrypted)
decoded = decoded.decode('ascii')
# do the xor, I already have the key in clear in the method
decoded = XORencode(decoded)

# inverse operation of the xor
# with inverse order of the operations
# the ROT is in the opposite direction, just need a - sign looking at the method
# in fact the method just rotate over the alphabet used
for _ in range(15):
    decoded = ROTencode(decoded, -3)
    decoded = base32decode(decoded)
    decoded = ROTencode(decoded, -13)
    decoded = base64decode(decoded)
    
# and this is it, the flag
print(f'[!] The message is = {decoded}')
    